## Create new Next.js project
-   Create new project with TypeScript, Tailwindcss, App router (`npx create-next-app@latest project-name`)

## AWS S3 Bucket setups
-   Create a new AWS S3 bucket (with all default settings)
-   Change the permission for the bucket (to public)
-   Set the policy for the bucket (to public)
    Now you can see the images publicly available

-   Go to AWS IAM and create a new user (User group: 'AmazonS3FullAccess')
-   Go to the created user > Click 'Create access key' (select other option) > Leave the 'Description tag value' as empty > Create access key
    Copy the access key (NEXT_AWS_S3_ACCESS_KEY_ID),
    Copy the secret access key (NEXT_AWS_S3_SECRET_ACCESS_KEY),

## Create a database in Neon
-   Create a new database
-   Copy the database string and paste in into the .env file

## .env Configuration
```
    NEXT_AWS_S3_REGION=s3_region
    NEXT_AWS_S3_ACCESS_KEY_ID=access_key
    NEXT_AWS_S3_SECRET_ACCESS_KEY=secret_access_key
    NEXT_AWS_S3_BUCKET_NAME=your_s3_bucket_name

    DATABASE_URL=your_database_url
```

## Install Dependancies 
-   Install AWS S3 (`npm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner`)
-   Install AWS lib store Client (`npm install @aws-sdk/lib-storage`)      // optional
-   Install Neon's serverless function (`npm install @neondatabase/serverless`)
-   Install React dropzone (`npm install react-dropzone`)

-   Create a new utils file for s3-client
-   Create the API routes for the presigned url (GET) and database connection (POST)
    `/app/api/presigned/route.ts`
    `/app/api/upload/image/route.ts`
-   Create the Basic UI with React dropzone and call the API 

    ðŸŽŠ Test the application. Will work properly.

## Additional Improvements with Shadcn UI
-   Initialize the the Schacn UI (`npx shadcn@latest init`)
-   Added Button, Dialog, Progress, Scroll Area, and Sonner from Shadcn
-   Created some new components and hooks from a GitHub code
-   Modified the imported components and hooks
-   Test the application. Will work properly


## File upload with the Edgestore
-   Install some Dependancies (`npm install @edgestore/server @edgestore/react zod`)
-   Create a new project in Edgestore dashboad (https://dashboard.edgestore.dev/)
-   Copy and paste the environment variables to .env
-   Follow the official documentation to create the necessary files
    `/app/api/edgestore/[...edgestore]/route.ts`,
    `/utils/edgestore.ts`,
    `/app/edgestore/layout.tsx`


