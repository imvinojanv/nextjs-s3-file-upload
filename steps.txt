## Create new Next.js project
-   Create new project with TypeScript, Tailwindcss, App router (`npx create-next-app@latest project-name`)

## AWS S3 Bucket setups
-   Create a new AWS S3 bucket (with all default settings)
-   Change the permission for the bucket (to public)
-   Set the policy for the bucket (to public)
    Now you can see the images publicly available

-   Go to AWS IAM and create a new user (User group: 'AmazonS3FullAccess')
-   Go to the created user > Click 'Create access key' (select other option) > Leave the 'Description tag value' as empty > Create access key
    Copy the access key (NEXT_AWS_S3_ACCESS_KEY_ID),
    Copy the secret access key (NEXT_AWS_S3_SECRET_ACCESS_KEY),

## Create a database in Neon
-   Create a new database
-   Copy the database string and paste in into the .env file

## .env Configuration
```
    NEXT_AWS_S3_REGION=s3_region
    NEXT_AWS_S3_ACCESS_KEY_ID=access_key
    NEXT_AWS_S3_SECRET_ACCESS_KEY=secret_access_key
    NEXT_AWS_S3_BUCKET_NAME=your_s3_bucket_name

    DATABASE_URL=your_database_url
```

## Install Dependancies 
-   Install AWS S3 (`npm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner`)
-   Install AWS lib store Client (`npm install @aws-sdk/lib-storage`)      // optional
-   Install Neon's serverless function (`npm install @neondatabase/serverless`)
-   Install React dropzone (`npm install react-dropzone`)

-   Create a new utils file for s3-client
-   Create the API routes for the presigned url (GET) and database connection (POST)
    `/app/api/presigned/route.ts`
    `/app/api/upload/image/route.ts`
-   Create the Basic UI with React dropzone and call the API 

    ðŸŽŠ Test the application. Will work properly.

## Additional Improvements with Shadcn UI
-   Initialize the the Schacn UI (`npx shadcn@latest init`)
-   Added Button, Dialog, Progress, Scroll Area, and Sonner from Shadcn
-   Created some new components and hooks from a GitHub code
-   Modified the imported components and hooks
-   Test the application. Will work properly



## File upload with the Edgestore
-   Install some Dependancies (`npm install @edgestore/server @edgestore/react zod`)
-   Create a new project in Edgestore dashboad (https://dashboard.edgestore.dev/)
-   Copy and paste the environment variables to .env
-   Follow the official documentation to create the necessary files
    `/app/api/edgestore/[...edgestore]/route.ts`,
    `/utils/edgestore.ts`,
    `/app/edgestore/layout.tsx`,
    `/app/edgestore/page.tsx`

-   For Single Image upload
    `/app/edgestore/_components/single-image-uploader.tsx`,
    `/components/edgestore/single-image-dropzone.tsx,

-   For Multi Image upload
    `/app/edgestore/_components/multi-image-uploader.tsx`,
    `/components/edgestore/multi-image-dropzone.tsx,

-   For Multi File upload
    `/app/edgestore/_components/multi-file-uploader.tsx`,
    `/components/edgestore/multi-file-dropzone.tsx,



## File upload with Bunny CDN
-   Create an account in bunny.net
-   Click 'Storage' > Create new storage zone > Will redirect to file manager dashboard
-   Click 'FTP & API Access' > Copy the 'Password'
-   Setup the .env variables:
    NEXT_PUBLIC_BUNNY_CDN_ACCESS_KEY: Password
    NEXT_PUBLIC_BUNNY_STORAGE_ZONE_NAME: Storage zone name
    NEXT_PUBLIC_BUNNY_STORAGE_BASE_URL: https://STORAGE_ZONE_NAME.b-cdn.net
-   Connect Pull Zone to activate the URL publicly

-   Create an API route to call the Bunny API
    `/app/api/bunny-cdn/route.ts`
-   Create a file uploader component
    `/app/bunny-cdn/page.tsx`

REF: https://50bytesjournal.hashnode.dev/nextjs-and-bunny-cdn-complete-guide-to-image-uploading-with-server-actions



## File upload with Next-S3-Upload
-   Install Dependancies (`npm install next-s3-upload`)
-   Create a new IAM user with new policies that mention in the next-s3-upload documentation
-   Create access key and paste them for the next-s3-upload
-   Create an API file for the next-s3-upload
    `/app/api/s3-upload/route.ts`
    `/app/api/next-s3-upload/route.ts`  :   Custom API routes
-   Create the frontend to upload the files
    `Basic single file upload`, `Custom file input`, `Multiple file upload`, and `presigned file upload`

REF: https://next-s3-upload.codingvalue.com/setup



## File upload with Cloudflare R2 Storage and Next-S3-Upload
-   Install Dependancies (`npm install next-s3-upload`)
-   Create an account on Cloudflare
-   Click "R2 Object Storage" > Create a new bucket
-   Click "Settings" of the bucket > Update CORS
-   Copy the S3 API from the bucket details of the settings. (`https://<Account_ID>.r2.cloudflarestorage.com/<name-of-bucket>`)
-   Go to Public access setting of the bucket and set a custom domain to access the files of the bucket.
    If the domain doesn't exist in DNS, you need to add the domain by chnaging the nameservers on your domain providers (GoDaddy)
    Coonect the domain in settings > Public access, then allow the public access
-   Back to the R2 dashboad > Manage R2 API Tokens > Create API token
-   Copy the `Access Key ID` and `Secret Access Key`
-   Create an API endpoint with all keys for the Cloudflare
    `/app/api/cloudflare-next-s3-upload/route.ts`